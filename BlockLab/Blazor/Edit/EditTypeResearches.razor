@page "/edit/type"
@page "/edit/type/{istrash:bool}"
@inherits OwningComponentBase<BlockLabContext>

<PageTitle>@Mode - Лаборатория</PageTitle>

<div class="container-fluid">
    <div class="row">
        <div class="col-md-3 mb-2">
            <nav class="flex-column">
                <_EditLeftSidebarPartial />
            </nav>
        </div>
        <div class="col-md-9 mb-2">
            <div class="border-1 bg-light shadow rounded-1 p-2">
                <h1 class="my-2 p-2">@Mode</h1>

                <p>Все виды исследований:</p>

                <div class="table-responsive">
                    <table class="table table-sm table-bordered table-striped">
                        <thead>
                            <tr>
                                <th>Название</th>
                                <th>Вид</th>
                                <th>Исследований</th>
                                <th></th>
                            </tr>
                        </thead>
                        <tbody>
                            @if (TypeResearches is null)
                            {
                                <tr><th colspan="9" class="p-4 text-center">Загрузка ...</th></tr>
                            }
                            else if (!TypeResearches.Any())
                            {
                                <tr><th colspan="9" class="p-4 text-center">Данные отсутствуют</th></tr>
                            }
                            else
                            {
                                foreach (var e in TypeResearches)
                                {
                                    <tr>
                                        <td>@e.Name</td>
                                        <td>@e.TypeResult.ToString()</td>
                                        <td>@e.Researches.Count() шт.</td>
                                        <td class="text-center">
                                            @if (!IsTrash)
                                            {
                                                <NavLink class="btn btn-sm btn-info mb-1" href="@($"edit/type/edit/{e.Id}")">
                                                    <i class="fas fa-edit"></i>
                                                    Редактировать
                                                </NavLink>
                                                <button class="btn btn-sm btn-warning mb-1" @onclick="@( () => HandleTrash(e) )">
                                                    <i class="fas fa-trash"></i>
                                                </button>
                                            }
                                            else
                                            {
                                                <button class="btn btn-sm btn-success mb-1" @onclick="@( () => HandleUndoTrash(e) )">
                                                    <i class="fas fa-undo"></i>
                                                    Вернуть из корзины
                                                </button>
                                                @if (!e.Researches.Any())
                                                {
                                                    <button class="btn btn-sm btn-danger mb-1" @onclick="@( () => HandleDelete(e) )">
                                                        <i class="fas fa-times"></i>
                                                        Удалить совсем
                                                    </button>
                                                }
                                            }
                                        </td>
                                    </tr>
                                }
                            }
                        </tbody>
                    </table>
                </div>

                <div class="my-1">
                    @if (!IsTrash)
                    {
                        <NavLink class="btn btn-success mb-1" href="edit/type/create"> 
                            <i class="fas fa-plus"></i>
                            Добавить
                        </NavLink>
                        <NavLink class="btn btn-secondary mb-1" href="@($"edit/type/{true}")">
                            <i class="fas fa-trash"></i>
                            Корзина
                        </NavLink>
                        <button class="btn btn-info mb-1" @onclick="@( () => UpdateData() )">
                            <i class="fa fa-wifi"></i>
                            Обновить
                        </button>
                    }
                    else
                    {
                        <NavLink class="btn btn-secondary mb-1" href="edit/type">
                            <i class="fa fa-arrow-left"></i>
                            Назад
                        </NavLink>
                        <button class="btn btn-info mb-1" @onclick="@( () => UpdateData() )">
                            <i class="fa fa-wifi"></i>
                            Обновить
                        </button>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    BlockLabContext _Context => Service;
    [Parameter]
    public bool IsTrash { get; set; }
    private IQueryable<TypeResearch> _Query => _Context.TypeResearches
        .Include(x => x.Researches);
    public IEnumerable<TypeResearch>? TypeResearches { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        await UpdateData();
    }
    private async Task UpdateData()
    {
        TypeResearches = (!IsTrash) 
            ? await _Query.Where(p => !p.IsDelete).ToArrayAsync() 
            : await _Query.Where(p => p.IsDelete).ToArrayAsync();
    }

    public async Task HandleTrash(TypeResearch r)
    {
        r.IsDelete = true;
        await _Context.SaveChangesAsync();
        await UpdateData();
    }
    public async Task HandleUndoTrash(TypeResearch r)
    {
        r.IsDelete = false;
        await _Context.SaveChangesAsync();
        await UpdateData();
    }
    public async Task HandleDelete(TypeResearch r)
    {
        if (r.Researches.Any())
            return;
        _Context.Remove<TypeResearch>(r);
        await _Context.SaveChangesAsync();
        await UpdateData();
    }

    public string Mode => IsTrash ? "Корзина удаленных видов исследовааний" : "Редактирование видов исследований";
}
